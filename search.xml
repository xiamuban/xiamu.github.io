<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JAVA并发编程</title>
    <url>/2021/12/02/JUC/</url>
    <content><![CDATA[<h1 id="Java并发编程"><a href="#Java并发编程" class="headerlink" title="Java并发编程"></a>Java并发编程</h1><h2 id="进程与线程的概念"><a href="#进程与线程的概念" class="headerlink" title="进程与线程的概念"></a>进程与线程的概念</h2><h3 id="（1）什么是进程"><a href="#（1）什么是进程" class="headerlink" title="（1）什么是进程"></a>（1）什么是进程</h3><blockquote>
<p>进程：程序由指令和数据组成，</p>
</blockquote>
<h3 id="（2）什么是线程"><a href="#（2）什么是线程" class="headerlink" title="（2）什么是线程"></a>（2）什么是线程</h3><blockquote>
<ul>
<li>一个进程可以有多个线程</li>
<li>一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给CPU执行</li>
<li>线程作为任务调度的最小单位，进程作为资源分配的最小单位</li>
</ul>
</blockquote>
<h2 id="并发与并行的概念"><a href="#并发与并行的概念" class="headerlink" title="并发与并行的概念"></a>并发与并行的概念</h2><h3 id="（1）什么是并发-Concurrent"><a href="#（1）什么是并发-Concurrent" class="headerlink" title="（1）什么是并发(Concurrent)"></a>（1）什么是并发(Concurrent)</h3><blockquote>
<p>同一时刻多个线程轮流使用CPU，并不是同时执行的。</p>
</blockquote>
<h3 id="（1）什么是并行"><a href="#（1）什么是并行" class="headerlink" title="（1）什么是并行"></a>（1）什么是并行</h3><blockquote>
<p>同一时刻多个线程同时使用CPU，一般是多核CPU，因此是同时执行的。</p>
</blockquote>
<h2 id="创建线程的方法"><a href="#创建线程的方法" class="headerlink" title="创建线程的方法"></a>创建线程的方法</h2><h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Concurrent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        myThread.setName(<span class="string">&quot;子线程:&quot;</span>);</span><br><span class="line">        <span class="comment">//开启线程</span></span><br><span class="line">        myThread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="comment">//重写run()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Concurrent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyRunnable());</span><br><span class="line">        thread.setName(<span class="string">&quot;子线程:&quot;</span>);</span><br><span class="line">        <span class="comment">//开启线程</span></span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Concurrent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//执行Callable 方式，需要FutureTask 实现实现，用于接收运算结果</span></span><br><span class="line">        FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;Integer&gt;(<span class="keyword">new</span> MyCallable());</span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line">        <span class="comment">//接收线程运算后的结果</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Integer sum = futureTask.get();</span><br><span class="line">            System.out.println(sum);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用线程池"><a href="#使用线程池" class="headerlink" title="使用线程池"></a>使用线程池</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Concurrent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建线程池</span></span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">5</span>);<span class="comment">//创建固定线程数量的线程池</span></span><br><span class="line">        ThreadPool threadPool = <span class="keyword">new</span> ThreadPool();</span><br><span class="line">        <span class="comment">//为线程池分配任务</span></span><br><span class="line">        executorService.submit(threadPool);</span><br><span class="line">        <span class="comment">//关闭线程池</span></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="主线程和守护线程"><a href="#主线程和守护线程" class="headerlink" title="主线程和守护线程"></a>主线程和守护线程</h2><blockquote>
<p>默认情况下，Java进程需要等待所有线程都运行结束才会结束</p>
<p>守护线程：只要其他非守护线程都运行结束了，即使守护线程的代码没有执行完，也会强制结束。<br>启动之前：thread.setDaemon(true);即可设置该线程为守护线程。</p>
<p>垃圾回收线程就是一种守护线程。</p>
</blockquote>
<h2 id="线程的几种状态"><a href="#线程的几种状态" class="headerlink" title="线程的几种状态"></a>线程的几种状态</h2><h3 id="从操作系统层面（五种）"><a href="#从操作系统层面（五种）" class="headerlink" title="从操作系统层面（五种）"></a>从操作系统层面（五种）</h3><p><img src="https://s2.loli.net/2021/12/04/iSelVbzxPKEZ7jB.png" alt="img"></p>
<h4 id="新建-初始状态"><a href="#新建-初始状态" class="headerlink" title="新建/初始状态"></a>新建/初始状态</h4><blockquote>
<p>新创建了一个线程对象。</p>
</blockquote>
<h4 id="就绪-可运行状态"><a href="#就绪-可运行状态" class="headerlink" title="就绪/可运行状态"></a>就绪/可运行状态</h4><blockquote>
<p>指该线程已经被创建，等待 CPU 调度执行。</p>
</blockquote>
<h4 id="运行状态"><a href="#运行状态" class="headerlink" title="运行状态"></a>运行状态</h4><blockquote>
<p>指获取了 CPU 时间片运行中的状态</p>
<p>当 CPU 时间片用完，会从【运行状态】转换至【可运行状态】，会导致线程的上下文切换</p>
</blockquote>
<h4 id="阻塞状态"><a href="#阻塞状态" class="headerlink" title="阻塞状态"></a>阻塞状态</h4><blockquote>
<p>等 BIO 操作完毕，会由操作系统唤醒阻塞的线程，转换至【可运行状态】<br>与【可运行状态】的区别是，对于【阻塞状态】的线程来说只要它们一直不唤醒，调度器就一直不会考虑调度它们</p>
</blockquote>
<h4 id="死亡状态"><a href="#死亡状态" class="headerlink" title="死亡状态"></a>死亡状态</h4><blockquote>
<p>表示线程已经执行完毕，生命周期已经结束，不会再转换为其它状态</p>
</blockquote>
<p>参考：</p>
<p><a href="https://blog.csdn.net/xingjing1226/article/details/81977129">线程的5种状态详解</a></p>
<h3 id="从JAVA层面（六种）"><a href="#从JAVA层面（六种）" class="headerlink" title="从JAVA层面（六种）"></a>从JAVA层面（六种）</h3><p><img src="https://img-blog.csdnimg.cn/20181120173640764.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BhbmdlMTk5MQ==,size_16,color_FFFFFF,t_70" alt="img"></p>
<h4 id="初始状态"><a href="#初始状态" class="headerlink" title="初始状态"></a>初始状态</h4><blockquote>
<p>新创建了一个线程对象，但还没有调用start()方法。</p>
</blockquote>
<h4 id="运行状态-1"><a href="#运行状态-1" class="headerlink" title="运行状态"></a>运行状态</h4><blockquote>
<p>Java线程中将就绪（ready）和运行中（running）两种状态笼统的称为“运行”。</p>
<p>线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取CPU的使用权，此时处于就绪状态（ready）。就绪状态的线程在获得CPU时间片后变为运行中状态（running）。</p>
</blockquote>
<h4 id="阻塞状态-1"><a href="#阻塞状态-1" class="headerlink" title="阻塞状态"></a>阻塞状态</h4><blockquote>
<p>表示线程阻塞于锁。</p>
</blockquote>
<h4 id="等待状态"><a href="#等待状态" class="headerlink" title="等待状态"></a>等待状态</h4><blockquote>
<p>进入该状态的线程需要等待其他线程做出一些特定动作（通知或中断）。</p>
</blockquote>
<h4 id="超时等待状态"><a href="#超时等待状态" class="headerlink" title="超时等待状态"></a>超时等待状态</h4><blockquote>
<p>该状态不同于等待(WAITING)，它可以在指定的时间后自行返回。</p>
</blockquote>
<h4 id="终止状态"><a href="#终止状态" class="headerlink" title="终止状态"></a>终止状态</h4><blockquote>
<p>表示该线程已经执行完毕。</p>
</blockquote>
<p>参考：</p>
<p><a href="https://blog.csdn.net/pange1991/article/details/53860651">Java线程的6种状态及切换</a></p>
<p><a href="https://blog.csdn.net/printfscanfmng/article/details/106259535">线程的状态在操作系统层面和JAVA API层面的区别</a></p>
<h2 id="Sleep和Wait的区别"><a href="#Sleep和Wait的区别" class="headerlink" title="Sleep和Wait的区别"></a>Sleep和Wait的区别</h2><p><img src="https://s2.loli.net/2021/12/04/ElmYLiUSAXwMIPR.png"></p>
<h2 id="Run和Start的区别"><a href="#Run和Start的区别" class="headerlink" title="Run和Start的区别"></a>Run和Start的区别</h2><p><img src="https://s2.loli.net/2021/12/04/cDivuQRy1HVtjxZ.png"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JUC</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis学习</title>
    <url>/2021/12/02/Redis/</url>
    <content><![CDATA[<h2 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h2><h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3><blockquote>
<p>指采用了关系模型来组织数据的数据库。</p>
<p><strong>关系模型</strong>指的就是二维表格模型，而一个关系型数据库就是由二维表及其之间的联系所组成的一个数据组织。</p>
<p>主流的关系型数据库有：<a href="https://www.oracle.com/database/index.html">Oracle</a>，<a href="https://www.microsoft.com/en-us/sql-server/">Microsoft SQL Server</a>，<a href="https://www.mysql.com/">MySQL</a>，<a href="https://www.postgresql.org/">PostgreSQL</a>，<a href="https://www.ibm.com/analytics/us/en/db2/">DB2</a>，<br> <a href="https://products.office.com/zh-cn/access">Microsoft Access</a>， <a href="https://www.sqlite.org/">SQLite</a>，<a href="https://www.teradata.com.cn/">Teradata</a>，<a href="https://mariadb.org/">MariaDB</a>(MySQL的一个分支)，<a href="https://www.sap.com/">SAP</a></p>
</blockquote>
<p>优点：</p>
<ul>
<li>容易理解：关系清晰。</li>
<li>使用方便：通用的SQL语言操作关系型数据库非常方便。</li>
<li>易于维护：丰富的数据完整性，减少了数据的冗余和数据不一致的概率。</li>
</ul>
<p>缺点</p>
<ul>
<li><p>拓展性低</p>
</li>
<li><p>性能低，多表关联查询导致性能欠佳。</p>
</li>
<li><p>数据库事务必须具备ACID特性</p>
<ul>
<li><p>Atomic 原子性</p>
<blockquote>
<p>原子性是指事务包含的操作要么全部成功，要么全部失败回滚。</p>
</blockquote>
</li>
<li><p>Consistency 一致性</p>
<blockquote>
<p>一致性是指事务必须使数据库从一个一致性状态转变到另一个一致性状态，也就是说一个事务执行之前和之后都必须处于一致性状态，例如：用户A和用户B两者的余额加起来一共是4000，那么两者之间不管如何进行转账，最终两者余额总值依旧是4000。</p>
</blockquote>
</li>
<li><p>Isolation 隔离性</p>
<blockquote>
<p>隔离性是指多个事务之间自身的操作是隔离的，不会互相影响。</p>
</blockquote>
</li>
<li><p>Durability 持久性</p>
<blockquote>
<p>持久性是指一个事务一旦提交了，那么对于数据库中的数据的改变就是永久性的，即使在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="非关系型数据库（NoSQL"><a href="#非关系型数据库（NoSQL" class="headerlink" title="非关系型数据库（NoSQL)"></a>非关系型数据库（NoSQL)</h3><blockquote>
<p>指非关系型，分布式的，且一般不保证遵循ACID原则的数据存储系统。</p>
<p>非关系型数据库采用键值对存储，且结构不固定。</p>
</blockquote>
<p>特点：</p>
<ul>
<li>可扩容，可伸缩</li>
<li>大数据量下高性能</li>
<li>灵活的数据模型</li>
</ul>
<h4 id="面向高性能并发读写的key-value数据库："><a href="#面向高性能并发读写的key-value数据库：" class="headerlink" title="面向高性能并发读写的key-value数据库："></a>面向高性能并发读写的key-value数据库：</h4><blockquote>
<p>主流代表有：<a href="https://redis.io/"><strong>Redis</strong></a>， <a href="https://aws.amazon.com/cn/dynamodb/">Amazon DynamoDB</a>， <a href="https://memcached.org/">Memcached</a>，<a href="https://azure.microsoft.com/en-us/services/cosmos-db/">Microsoft Azure Cosmos DB</a>和<a href="https://hazelcast.com/">Hazelcast</a></p>
</blockquote>
<h4 id="面向海量数据访问的面向文档数据库："><a href="#面向海量数据访问的面向文档数据库：" class="headerlink" title="面向海量数据访问的面向文档数据库："></a>面向海量数据访问的面向文档数据库：</h4><blockquote>
<p>主流代表有：<a href="https://www.mongodb.com/"><strong>MongoDB</strong></a>，<a href="https://aws.amazon.com/cn/dynamodb/">Amazon DynamoDB</a>，<a href="https://www.couchbase.com/">Couchbase</a>，<a href="https://azure.microsoft.com/en-us/services/cosmos-db/">Microsoft Azure Cosmos DB</a>和<a href="https://couchdb.apache.org/">CouchDB</a></p>
</blockquote>
<h4 id="面向搜索数据内容的搜索引擎："><a href="#面向搜索数据内容的搜索引擎：" class="headerlink" title="面向搜索数据内容的搜索引擎："></a>面向搜索数据内容的搜索引擎：</h4><blockquote>
<p>主流代表有：<a href="https://www.elastic.co/products/elasticsearch">Elasticsearch</a>，<a href="https://www.splunk.com/zh-hans_cn">Splunk</a>，<a href="https://lucene.apache.org/solr/">Solr</a>，<a href="https://www.marklogic.com/">MarkLogic</a>和<a href="http://sphinxsearch.com/">Sphinx</a></p>
</blockquote>
<h4 id="面向可扩展性的分布式数据库："><a href="#面向可扩展性的分布式数据库：" class="headerlink" title="面向可扩展性的分布式数据库："></a>面向可扩展性的分布式数据库：</h4><blockquote>
<p>主流代表有：<a href="https://cassandra.apache.org/">Cassandra</a>，<a href="https://hbase.apache.org/">HBase</a>，<a href="https://azure.microsoft.com/en-us/services/cosmos-db/">Microsoft Azure Cosmos DB</a>，<a href="https://www.datastax.com/products/datastax-enterprise">Datastax Enterprise</a>和<a href="https://accumulo.apache.org/">Accumulo</a></p>
</blockquote>
<h4 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h4><blockquote>
<p>NoSQL的基本需求就是支持分布式存储，严格一致性与可用性需要互相取舍</p>
<p>CAP理论：**一个分布式系统不可能同时满足C(一致性)、A(可用性)、P(分区容错性)**三个基本需求，并且最多只能满足其中的两项。对于一个分布式系统来说，分区容错是基本需求，否则不能称之为分布式系统，因此需要在C和A之间寻求平衡。</p>
</blockquote>
<ul>
<li><p><code>C(Consistency)</code>  一致性</p>
<blockquote>
<p>一致性是指更新操作成功并返回客户端完成后，所有节点在同一时间的数据完全一致。与ACID的C完全不同</p>
</blockquote>
</li>
<li><p><code>A(Availability)</code>  可用性</p>
<blockquote>
<p>可用性是指服务一直可用，而且是正常响应时间。</p>
</blockquote>
</li>
<li><p><code>P(Partition tolerance) </code>  分区容错性</p>
<blockquote>
<p>分区容错性是指分布式系统在遇到某节点或网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务</p>
</blockquote>
</li>
</ul>
<h3 id="Redis-简介"><a href="#Redis-简介" class="headerlink" title="Redis 简介"></a>Redis 简介</h3><blockquote>
<p>Redis (REmote DIctionary Server) 是使用C语言开发的一个开源的高性能键值对（key-value）数据库。</p>
</blockquote>
<p>特点：</p>
<ul>
<li>数据间没有必然的关联关系。</li>
<li>内部采用单线程机制进行工作。</li>
<li>高性能。</li>
<li>多数据类型支持<ul>
<li>字符串类型    string</li>
<li>列表类型      list</li>
<li>散列类型      hash</li>
<li>集合类型      set</li>
<li>有序集合类型   sorted_set</li>
</ul>
</li>
<li>持久化支持，可以进行数据灾难恢复。</li>
</ul>
<h3 id="Redis-应用"><a href="#Redis-应用" class="headerlink" title="Redis 应用"></a>Redis 应用</h3><ul>
<li>为热点数据加速查询（主要场景），如热点商品、热点新闻、热点资讯、推广类等高访问量信息等</li>
<li>任务队列，如秒杀、抢购、购票排队等</li>
<li>即时信息查询，如各种排行榜、各类网站访问统计、公交到站信息、在线人数信息、设备信号等</li>
<li>时效性信息控制，如验证码控制、投票控制等</li>
<li>分布式数据分享，如分布式集群架构中的session分离</li>
<li>消息队列</li>
<li>分布式锁</li>
</ul>
<h2 id="Redis-数据存储格式"><a href="#Redis-数据存储格式" class="headerlink" title="Redis 数据存储格式"></a>Redis 数据存储格式</h2><blockquote>
<p>Redis 自身是一个Map ，其中所有的数据都是采用key-value的形式存储</p>
<p>key部分永远都是字符串，Redis 数据类型指的是value部分的类型</p>
</blockquote>
<h3 id="String-类型"><a href="#String-类型" class="headerlink" title="String 类型"></a>String 类型</h3><blockquote>
<p>存储的是单个的数据，最简单的数据存储类型，也是最常用的数据存储类型。</p>
<p>存储格式是：一个存储空间保存一个数据</p>
<p>存储内容通常使用字符串，如果字符串以整数的形式展示，则可以作为数据操作使用</p>
</blockquote>
<p>例如：</p>
<p>​    key              value</p>
<p>​    name ——–&gt;    xiamu</p>
<p>​    age  ——–&gt;     22</p>
<h4 id="string-类型数据的基本操作"><a href="#string-类型数据的基本操作" class="headerlink" title="string 类型数据的基本操作"></a>string 类型数据的基本操作</h4><ul>
<li><p>添加/修改数据</p>
<blockquote>
<p><strong>set</strong> key value</p>
</blockquote>
</li>
<li><p>获取数据</p>
<blockquote>
<p><strong>get</strong> key</p>
</blockquote>
</li>
<li><p>删除数据</p>
<blockquote>
<p><strong>del</strong> key</p>
</blockquote>
<p>例如：</p>
<p><img src="https://s2.loli.net/2021/12/04/qJySxLZTravzMjh.png" alt="image-20210925133830113"></p>
</li>
<li><p>添加/修改多个数据</p>
<blockquote>
<p><strong>mset</strong> key1 value1 key2 value2</p>
</blockquote>
</li>
<li><p>获取多个数据</p>
<blockquote>
<p><strong>mget</strong> key1 key2 …</p>
</blockquote>
</li>
<li><p>获取数据字符个数（字符串长度）</p>
<blockquote>
<p><strong>strlen</strong> key</p>
</blockquote>
</li>
<li><p>追加信息到原始信息后面（如果原始信息存在就追加，否则就新建）</p>
<blockquote>
<p><strong>append</strong> key value</p>
</blockquote>
</li>
</ul>
<h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><blockquote>
<p>短时间内有大量的key集中过期，新的缓存还未到来，因此所有的请求都去查询数据库，从而对数据库CPU和内存造成巨大的压力，严重的会导致数据库宕机，从而形成一系列连锁反应，造成整个系统崩溃。</p>
</blockquote>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul>
<li><p>构建多级缓存架构</p>
<blockquote>
<p>Nginx缓存 + Redis缓存 + ehcache缓存</p>
</blockquote>
</li>
<li><p>检测Mysql严重耗时业务时对其进行优化</p>
<blockquote>
<p>对数据库的瓶颈排查：例如超时查询，耗时较高的事务等</p>
</blockquote>
</li>
<li><p>灾难预警机制</p>
<blockquote>
<p>监控redis服务器性能指标</p>
<ul>
<li>cpu 占用和使用率</li>
<li>内存容量</li>
<li>查询平均相应时间</li>
<li>线程数</li>
</ul>
</blockquote>
</li>
<li><p>限流、降级</p>
<blockquote>
<p>短时间范围内牺牲一些客户体验，限制一部分请求访问，降低应用服务器压力，待业务低速运转后再逐步访问放开访问。</p>
</blockquote>
</li>
</ul>
<h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><h3 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h3><blockquote>
<p>Redis中某个key过期，这个key访问量巨大</p>
<p>多个数据请求从服务器直接压到Redis后，均未命中</p>
<p>Redis在短时间内发起了大量对数据库中同一个数据的访问</p>
</blockquote>
<h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><ul>
<li><p>预先设定</p>
<blockquote>
<p>对于一些高热的数据信息可以预先加大这些key的过期时长。</p>
</blockquote>
</li>
<li><p>现场调整</p>
<blockquote>
<p>监控访问量，对自然流量激增的数据延长过期时间，或者设置为永久性key。</p>
</blockquote>
</li>
<li><p>后台刷新数据</p>
<blockquote>
<p>启动定时任务，高峰期来临之前，刷新数据有效时间，确保不丢失。</p>
</blockquote>
</li>
<li><p>二级缓存</p>
<blockquote>
<p>设置不同的失效时间，保证不会被同时淘汰就行。</p>
</blockquote>
</li>
<li><p>加锁</p>
<blockquote>
<p>分布式锁，可防止被击穿，但慎重使用。</p>
</blockquote>
</li>
</ul>
<h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><h3 id="问题分析-2"><a href="#问题分析-2" class="headerlink" title="问题分析"></a>问题分析</h3><blockquote>
<p>获取的数据在数据库中也不存在，数据库查询未得到相应的数据</p>
<p>Redis获取到null数据未进行持久化，直接返回</p>
<p>下次此类数据到达重复上述过程</p>
<p>出现黑客攻击服务器</p>
</blockquote>
<h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><ul>
<li><p>缓存null</p>
<blockquote>
<p>对查询结果为null的数据进行缓存（长期使用，定时清理），设定短时限。</p>
</blockquote>
</li>
<li><p>实施监控</p>
<blockquote>
<p>实时监控redis的命中率与null数据的占比。</p>
</blockquote>
</li>
<li><p>key加密</p>
</li>
<li><p>布隆过滤器</p>
<blockquote>
<p>将数据库中所有的查询条件，放入布隆过滤器中，</p>
<p>当一个查询请求过来时，先经过布隆过滤器进行查，如果判断请求查询值存在，则继续查；如果判断请求查询不存在，直接丢弃。</p>
</blockquote>
<h3 id="布隆过滤器原理"><a href="#布隆过滤器原理" class="headerlink" title="布隆过滤器原理:"></a>布隆过滤器原理:</h3><blockquote>
<p>原理就是一个对一个key进行k个hash算法获取k个值，在比特数组中将这k个值散列后设定为1，然后查的时候如果特定的这几个位置都为1，那么布隆过滤器判断该key存在。</p>
<p>布隆过滤器可能会误判，如果它说不存在那肯定不存在，如果它说存在，那数据有可能实际不存在</p>
</blockquote>
<p>参考：</p>
<p><a href="https://blog.csdn.net/wx1528159409/article/details/88357728">Redis的缓存穿透及解决方法——布隆过滤器BloomFilter</a></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>SpringBoot框架</title>
    <url>/2021/12/07/SpringBoot/</url>
    <content><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="什么是Springboot"><a href="#什么是Springboot" class="headerlink" title="什么是Springboot"></a>什么是Springboot</h2><blockquote>
<p>Springboot其实就是基于Spring框架的扩展，相当于Spring那些基于XML文件的繁琐配置，SpringBoot开发更加快速便捷，同时还使用了内嵌式的Tomcat服务容器，提供了Starters来简化项目的构建配置，同时来尽可能的自动配置Spring应用。</p>
</blockquote>
<p><code>总结</code>：SpringBoot就是使编码变简单、配置变简单、部署变简单、监控变简单… </p>
<h2 id="起步依赖"><a href="#起步依赖" class="headerlink" title="起步依赖"></a>起步依赖</h2><p><strong>spring-boot-starter-parent</strong></p>
<blockquote>
<p>创建一个SpringBoot项目后，打开pom.xml配置文件会有如下代码</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>点开 spring-boot-starter-parent 出现另一个配置文件，然后有如下代码</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>再次点开 spring-boot-dependencies 就会有一个依赖配置文件，里面有个 <dependencyManagement></p>
<p>称为版本控制锁定，当继承了这个配置文件时就不需要指定对应依赖的版本，而这些依赖的版本也是经过测试的，相互之间不会造成冲突，因此为项目的配置提供了很大的便利。</p>
</blockquote>
<p><strong>spring-boot-starter-web</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>点击 spring-boot-starter-web 会有一个springboot Web开发的依赖配置文件，里面定义了了Web开发需要的一些依赖坐标信息，因此只要依赖于在这个文件，根据依赖的传递，因此就可以间接的导入这些依赖，而不用自己一个一个去导入，简化了项目的配置。</p>
</blockquote>
<p><code>starter场景启动器</code></p>
<blockquote>
<p>对于依赖 spring-boot-starter-* ： * 就代表着某种场景，只要引入starter，这个场景的所有常规需要的依赖我们都自动引入。</p>
<p>支持的场景有：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters">Starters</a></p>
</blockquote>
<p><code>如果需要修改项目依赖的版本号</code></p>
<p>例如：需要修改mysql连接驱动的版本号</p>
<ul>
<li><p>首先查看spring-boot-dependencies里规定当前依赖的版本用的 key</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.26<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>然后在当前项目的配置文件里重写</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.43<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h2><blockquote>
<p>引入spring-boot-web 场景启动器的时候，已经自动引入Tomcat依赖，和SpringMVC依赖，自动配置好了常用的组件。</p>
</blockquote>
<blockquote>
<p>默认的组件配置扫描</p>
<ul>
<li><p>主程序所在的包及其下面的子包里面的组件都会被默认扫描进<strong>ConfigurableApplicationContext</strong>（一个IOC容器）</p>
</li>
<li><p>如果想要改变扫描路径</p>
<ul>
<li><p>@SpringBootApplication(scanBasePackages=<strong>“包名”</strong>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages=&quot;com.xiamu&quot;)</span></span><br></pre></td></tr></table></figure></li>
<li><p>或者使用注解@ComponentScan 指定扫描路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&quot;com.xiamu&quot;)</span></span><br></pre></td></tr></table></figure></li>
<li><p>因此</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line">等同于</span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.xiamu&quot;)</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="注解说明"><a href="#注解说明" class="headerlink" title="注解说明"></a>注解说明</h2><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><blockquote>
<p>相当于传统的xml配置文件，</p>
<p>如果有些第三方库需要用到xml文件，建议仍然通过@Configuration类作为项目的配置主类，可以使用@ImportResource注解加载xml配置文件。</p>
</blockquote>
<p><code>beans.xml 配置文件</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;uu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiamu.springbootstudy.Model.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;夏目&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;24&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ImportResource(locations = &quot;classpath:beans.xml&quot;)</span><span class="comment">//加载xml配置文件</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">//告诉SpringBoot这是一个配置类 == 配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User u = <span class="keyword">new</span> User(<span class="string">&quot;xiamu&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootStudyApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        SpringApplication.run(SpringbootStudyApplication.class, args);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、返回我们IOC容器</span></span><br><span class="line">        ConfigurableApplicationContext run = SpringApplication.run(SpringbootStudyApplication.class, args);</span><br><span class="line"></span><br><span class="line">        User user = run.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        System.out.println(user.getName() + <span class="string">&quot;  &quot;</span> + user.getAge());</span><br><span class="line"></span><br><span class="line">        User uu = run.getBean(<span class="string">&quot;uu&quot;</span>, User.class);</span><br><span class="line">        System.out.println(uu.getName() + <span class="string">&quot;  &quot;</span> + uu.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>测试结果</code>：</p>
<img src="https://s2.loli.net/2021/12/07/CDPcMZtEXIleYSF.png" alt="image-20211207160517767" style="zoom:200%;" />

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring注解合集</title>
    <url>/2021/12/07/Spring-Annotation/</url>
    <content><![CDATA[<h1 id="Spring注解合集"><a href="#Spring注解合集" class="headerlink" title="Spring注解合集"></a>Spring注解合集</h1><h2 id="SpringMVC注解"><a href="#SpringMVC注解" class="headerlink" title="SpringMVC注解"></a>SpringMVC注解</h2><h3 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h3><table>
<thead>
<tr>
<th align="center">注解</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">@Controller</td>
<td align="center">用于定义控制器类，结合Service接口方法，来处理用户请求。</td>
</tr>
<tr>
<td align="center">@RestController</td>
<td align="center">用于标注控制层组件，@ResponseBody和@Controller的合集。使用后Controller中的方法无法返回jsp或html页面。</td>
</tr>
<tr>
<td align="center">@ResponseBody</td>
<td align="center">表示该方法的返回结果直接写入HTTP response body中，一般在异步获取数据时使用，比如返回JSON数据。</td>
</tr>
<tr>
<td align="center">@RequestMapping</td>
<td align="center">提供路由信息，负责URL到Controller中的具体函数的映射。</td>
</tr>
</tbody></table>
<h3 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h3><blockquote>
<p>将请求参数绑定到你控制器的方法参数上</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryUserName</span><span class="params">(<span class="meta">@RequestParam</span> String userName)</span></span></span><br></pre></td></tr></table></figure>

<h3 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h3><blockquote>
<p>将URL中占位符参数{xxx}绑定到处理器类的方法形参中@PathVariable(“xxx“)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;show/&#123;id&#125;/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id ,<span class="meta">@PathVariable(&quot;name&quot;)</span> String name)</span></span></span><br></pre></td></tr></table></figure>

<h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><blockquote>
<p>自动导入依赖的bean</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Service service;</span><br></pre></td></tr></table></figure>

<h3 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h3><blockquote>
<p>一般用于修饰service层的组件</p>
</blockquote>
<h3 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h3><blockquote>
<p>使用@Repository注解可以确保DAO或者repositories提供异常转译，这个注解修饰的DAO或者repositories类会被ComponetScan发现并配置，同时也不需要为它们提供XML配置项。</p>
</blockquote>
<h3 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h3><blockquote>
<p>用@Bean标注方法等价于XML中配置的bean。</p>
</blockquote>
<h3 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h3><blockquote>
<p>泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。</p>
</blockquote>
<h3 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h3><blockquote>
<p>当有多个同一类型的Bean时，可以用@Qualifier(“name”)来指定,与@Autowired配合使用。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="meta">@Qualifier(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">等同于</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Resource(name=&quot;user&quot;)</span></span><br></pre></td></tr></table></figure>

<h3 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h3><blockquote>
<p>@Resource(name=”name”,type=”type”)</p>
<p>没有括号内容的话，默认byName。</p>
</blockquote>
<h2 id="SpringBoot注解合集"><a href="#SpringBoot注解合集" class="headerlink" title="SpringBoot注解合集"></a>SpringBoot注解合集</h2><h3 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h3><blockquote>
<p>包含了@ComponentScan、@Configuration和@EnableAutoConfiguration注解。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line">等同于</span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.xiamu&quot;)</span></span><br></pre></td></tr></table></figure>

<h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><blockquote>
<p>让spring Boot扫描到Configuration类并把它加入到程序上下文。</p>
</blockquote>
<h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><blockquote>
<p>等同于spring的XML配置文件；使用Java代码可以检查类型安全。</p>
</blockquote>
<h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><blockquote>
<p>自动配置。</p>
</blockquote>
<h3 id="ComponentScan-1"><a href="#ComponentScan-1" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><blockquote>
<p>组件扫描，可自动发现和装配一些Bean。</p>
</blockquote>
<h3 id="Component-1"><a href="#Component-1" class="headerlink" title="@Component"></a>@Component</h3><blockquote>
<p>可配合CommandLineRunner使用，在程序启动后执行一些基础任务。</p>
</blockquote>
<h3 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h3><blockquote>
<p>注解是@Controller和@ResponseBody的合集,表示这是个控制器bean,并且是将函数的返回值直接填入HTTP响应体中,是REST风格的控制器。</p>
</blockquote>
<img src="https://s2.loli.net/2021/12/07/froDgKFtzNHeGuV.png" alt="image-20211207165806400" style="zoom: 200%;" />

<h3 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h3><blockquote>
<p>用来导入其他配置类。</p>
</blockquote>
<h3 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h3><blockquote>
<p>注入Spring boot application.properties配置的属性的值。</p>
</blockquote>
<img src="https://s2.loli.net/2021/12/07/Q2hPm4ZAXDSxb6s.png" alt="image-20211207164723713"  />

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.username&#125;&quot;)</span></span><br><span class="line">    String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.password&#125;&quot;)</span></span><br><span class="line">    String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><code>参考：</code></p>
<p><a href="https://blog.csdn.net/weixin_40753536/article/details/81285046">SpringBoot注解</a></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Annotation</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/12/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
